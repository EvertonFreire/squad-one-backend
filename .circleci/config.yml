version: 2
jobs:
  build:
    parallelism: 1
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=1"
    docker:
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Run tests in parallel
          command: |
            cd src/test/java
            # Get list of classnames of tests that should run on this node
            CLASSNAMES=$(circleci tests glob "**/*.java" \
              | cut -c 1- | sed 's@/@.@g' \
              | sed 's/.\{5\}$//' \
              | circleci tests split --split-by=timings --timings-type=classname)
            cd ../../..
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests --stacktrace",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            ./gradlew test $GRADLE_ARGS

      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/test-results/test
          when: always
      - run:
          name: Assemble JAR
          command: |
            # Skip this for other nodes
            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
              ./gradlew assemble
            fi
      - store_artifacts:
          path: build/libs

  Sonarize:
    parallelism: 1
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=1"
    docker:
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      sonar:
        - checkout
        - run:
            name: Run Sonar
            command: |
                cd src/test/java
                cd ../../..
                GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print " --stacktrace",$i}')
                echo "Prepared arguments for Gradle: $GRADLE_ARGS"
                ./gradlew sonarqube \
                -Dsonar.projectKey=IT_IS_SPARTAN \
                -Dsonar.organization=squad-one-it \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.login=00c3c958b87be7c18bf80b19c23b21e73ca5a92f

workflows:
  version: 2
  workflow:
    jobs:
      - build
      - Sonarize
